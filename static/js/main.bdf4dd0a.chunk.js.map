{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["Cell","flipCellsAroundMe","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","initialBoard","y","row","x","push","Math","random","createBoard","board","setBoard","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","every","cell","tblBoard","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"mSAqBeA,MALf,SAAc,GAA+B,IAA7BC,EAAiB,EAAjBA,kBAAmBC,EAAK,EAALA,MAC3BC,EAAO,eAAWD,EAAQ,WAAa,IAC7C,OAAO,oBAAIE,UAAWD,EAASE,QAASJ,GAC1C,E,MCgGeK,MAtFf,SAAe,GAAuD,IAAD,IAApDC,aAAK,MAAG,EAAC,MAAEC,aAAK,MAAG,EAAC,MAAEC,2BAAmB,MAAG,IAAI,EAC/D,EAA0BC,mBAG1B,WAGE,IAFA,IAAIC,EAAe,GAEVC,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIN,EAAOM,IACzBD,EAAIE,KAAKC,KAAKC,SAAWR,GAE3BE,EAAaI,KAAKF,EACpB,CACA,OAAOF,CACT,CAdmCO,IAAc,mBAA1CC,EAAK,KAAEC,EAAQ,KAqBtB,SAASC,EAAgBC,GACvBF,GAAS,SAAAG,GACP,MAAeD,EAAME,MAAM,KAAKC,IAAIC,QAAO,mBAApCd,EAAC,KAAEE,EAAC,KAELa,EAAW,SAACf,EAAGE,EAAGc,GAGlBd,GAAK,GAAKA,EAAIN,GAASI,GAAK,GAAKA,EAAIL,IACvCqB,EAAUhB,GAAGE,IAAMc,EAAUhB,GAAGE,GAEpC,EAGMc,EAAYL,EAASE,KAAI,SAAAZ,GAAG,mBAAQA,EAAG,IAW7C,OARAc,EAASf,EAAGE,EAAGc,GACfD,EAASf,EAAGE,EAAI,EAAGc,GACnBD,EAASf,EAAGE,EAAI,EAAGc,GACnBD,EAASf,EAAI,EAAGE,EAAGc,GACnBD,EAASf,EAAI,EAAGE,EAAGc,GAIZA,CACT,GACF,CAGA,GAhCST,EAAMU,OAAM,SAAAhB,GAAG,OAAIA,EAAIgB,OAAM,SAAAC,GAAI,OAAKA,CAAI,GAAC,IAiClD,OAAO,8BAAK,aAQd,IAFA,IAAIC,EAAW,GAENnB,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAE9B,IADA,IAAIC,EAAM,GAAG,WACJC,GACP,IAAIQ,EAAK,UAAMV,EAAC,YAAIE,GACpBD,EAAIE,KACF,cAAC,EAAI,CAEHb,MAAOiB,EAAMP,GAAGE,GAChBb,kBAAmB,kBAAMoB,EAAgBC,EAAM,GAF1CA,GAIP,EARKR,EAAI,EAAGA,EAAIN,EAAOM,IAAM,EAAxBA,GAUTiB,EAAShB,KAAK,6BAAaF,GAAJD,GACzB,CAEA,OACE,8BACE,uBAAOR,UAAU,QAAO,SACtB,gCAAQ2B,OAIhB,E,MCjGeC,MARf,WACE,OACE,qBAAK5B,UAAU,MAAK,SAClB,cAAC,EAAK,KAGZ,ECPa6B,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACD,cAAC,IAAMC,WAAU,UACb,cAAC,EAAG,M","file":"static/js/main.bdf4dd0a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({ flipCellsAroundMe, isLit }) {\n  const classes = `Cell ${isLit ? \"Cell-lit\" : \"\"}`;\n  return <td className={classes} onClick={flipCellsAroundMe} />;\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn)\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // TODO: return the copy\n\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You win!</div>;\n  }\n\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <div>\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    </div>\n  );\n}\n\n\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n\n"],"sourceRoot":""}